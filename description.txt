E 55 => State: dar class component ha vojod darad va b jaye props baraye meghdar dehi mojadad estefadte mishavad, ma mitavanim har property digari b jaye state estefadte konim vali dar bahse reRender faght ba taghir state code haye ma rerender mishavand.



جلسه 57 - بخش ایونت => ما در کلاس کامپوننت ها هر ایونتی که روی باکس خود ست کنیم و سپس هندلر آن را مینویسیم، ابتدا از طریق استیتی که قبلا در کانستراکتور تعریف کرده ایم، مقدار پراپرتی مد نظر خود را تغییر دادع و سپس استیت را به متد ست استیت پاس میدهیم تا باکسمان ریرندر شود.
دقت کنیم که هنگام پاس دادن تابع ایونت، حتما استیت یا دیس -منطور همان کلاس است- را بایند کنیم. در غیر این صورت دیس معنی آندیف خواهد داد.


key in map item => باید حین رندر کردن لیستی از ایتم ها، حتما به هر کدام از انها کی بدهیم و مقدار آن نیز باید یونیک باشد به همین دلیل باید برای آبجکت مخصوص آن ایتم، یک ای دی بزاریم و هرگز از ایندکس ایتم استفاده نکنیم زیرا ممکن است با حذف یا اضافه شدن آیتمی، مقدار کی ما تغییر کند و کنترل آیتم ها برای ریکت سخت شود.


forms => ما در کلاس کامپوننت ها برای هر اینپوت باید در استیت یک ولیو در نظر بگیریم.


*** ما علاوه بر استرینگ و نامبر و ...، میتوانیم یک متد را به عنوان ولیوی یک اتریبیوت در نظر بگیریم و آن را برای کامپوننت مورد نظر ارسال کنیم. --همانند کال بک فانکشن در نظر بگیر--ئ


Fragment = > اگر میخواهیم در کامپوننت خود هیچ تگ نگهدارنده ای نباشد، از فرگمنت استفاده میکنیم که از پکیج ریکت ایمپورت میشود یا اصلا میتوانیم تگ نگه دارنده را خالی بگذاریم که باز هم همان مفهوم را خواهد داشت .

life cycle = > هر کامپوننتی یک چرخه حیات دارد که شامل سه بخش mounting , updaating , unmounting میباشد .

در حین رخ دادن هر کدام از سه بخش بالا یعنی تولد ، اپدیت شدن و مردن کامپوننت یک تابع در کلاس کامپوننت ها اجرا میشود.

componentDidMount()
componentDidUpdate()
componentWillUnmount()


** Mounting

* اولین تابعی که حین تولد کامپوننت اجرا میشود، کانستراکتور است و به همین دلیل ما استیت ها را در انجا تعریف میکنیم.

پس از آن تابع 
static getDerivedStateFromProps(props,state){
    return {
        stete property ...
    }
}

تابع بالا برای ست کردن پراپس ها به عنوان استیت به کار گرفته میشود ولی کاربرد چندانی ندارد.

پس از تابع بالا ، تابع رندر و سپس کامپوننت دید مونت اجرا میشود.

** دقت شود هنگامی که تابع رندر به صورت کامل اجرا شد یعنی کامپوننت های فراخوانی شده داخل آن و تمامی توابع کامپوننت های داخلی اجرا شد، پس از آن تابع دید مونت اجرا میشود. نکته مهم تر این است که تابع دید مونت فقط یک بار اجرا میشه ولی رندر با اپدیت شدن هم اجرا میشه.

این تابع در مباحث ای جکس و اتصال به سرور کاربردی است.

updaating

آپدیت وقتی رخ میده که استیت یا پراپ های یک کامپوننت تغییر کنه . البته پراپ ها به خودی خود تغییر نمیکنه مگر اینکه کامپوننت داخلی باشه و ریرندر بشه.

ابتدا تابع 
getDerivedStateFromProps(props, state) 
اجرا میشه.
سپس تابع 
shouldComponentUpdate
که ترو یا فالس را ریترن میکند. اگر ترو را ریترن کند پس از آن تابع رندر اجرا میشود و اگر فالس بده تابع رندر اجرا نمیشه.

مثلا اگر بخواهیم تغییر کوچکی در کامپوننت بدهیم و سایر کامپوننت های داخلی آن که ربطی به موضوع ندارند رندر شوند ، اصلا بهینه نیست بنابراین با توجه به تغییری که رخ میدهد باید شرط بزاریم که کامپوننت داخلی رندر بشه یا نشه.

ب جای شولد کامپوننت میتوانیم به جای فراخوانی کامپوننت ، پیور کامپوننت را فراخوانی کنیم.


getSnapshotBeforeUpdate(props, state)
پس از رندر شدن کامل آپدیت کامپوننت، این تابع اجرا خواهد شد. تفاوت پراپرس و استیت آن با تابع گت دریود استیت در این است که این تابع پراپس و استیت های قبل از آپدیت را نشان میدهد. همچنین یک ولیو ریترن میکند که آن را به عنوان ورودی به تابع کامپوننت دید آپدیت پاس میدهیم.

componentDidUpdate(props, state, data)
